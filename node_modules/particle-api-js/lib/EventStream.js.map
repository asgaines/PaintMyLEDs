{"version":3,"sources":["../src/EventStream.js"],"names":["EventStream","uri","token","options","reconnectInterval","resolve","reject","parse","hostname","protocol","port","path","origin","isSecure","requestor","req","request","method","avoidFetch","mode","debug","on","error","e","errorDescription","statusCode","res","body","chunk","JSON","emit","error_description","undefined","data","buf","bind","once","end","abort","removeAllListeners","setTimeout","connect","catch","err","pos","length","discardTrailingNewline","lineLength","fieldLength","i","c","parseEventStreamLine","slice","event","name","eventName","indexOf","field","step","valueLength","value","lastEventId","retry","parseInt"],"mappings":"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","file":"EventStream.js","sourcesContent":["/* eslint max-depth: 0 */\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\nimport { EventEmitter } from 'events';\n\nclass EventStream extends EventEmitter {\n\tconstructor(uri, token, options) {\n\t\tsuper();\n\t\tthis.uri = uri;\n\t\tthis.token = token;\n\t\tthis.reconnectInterval = 2000;\n\t\tObject.assign(this, options);\n\t}\n\n\tconnect() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst { hostname, protocol, port, path } = url.parse(this.uri);\n\t\t\tthis.origin = `${protocol}//${hostname}${port ? (':' + port) : ''}`;\n\n\t\t\tconst isSecure = protocol === 'https:';\n\t\t\tconst requestor = isSecure ? https : http;\n\t\t\tconst req = requestor.request({\n\t\t\t\thostname,\n\t\t\t\tprotocol,\n\t\t\t\tpath: `${path}?history_limit=30&access_token=${this.token}`,\n\t\t\t\tmethod: 'get',\n\t\t\t\tport: port || (isSecure ? 443 : 80),\n\t\t\t\tavoidFetch: true,\n\t\t\t\tmode: 'prefer-streaming'\n\t\t\t});\n\n\t\t\tthis.req = req;\n\t\t\tif (this.debug) {\n\t\t\t\tthis.debug(this);\n\t\t\t}\n\n\t\t\treq.on('error', e => {\n\t\t\t\treject({ error: e, errorDescription: `Network error from ${this.uri}` });\n\t\t\t});\n\n\t\t\treq.on('response', res => {\n\t\t\t\tconst statusCode = res.statusCode;\n\t\t\t\tif (statusCode !== 200) {\n\t\t\t\t\tlet body = '';\n\t\t\t\t\tres.on('data', chunk => body += chunk);\n\t\t\t\t\tres.on('end', () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// don't bother doing anything special if the JSON.parse fails\n\t\t\t\t\t\t\t// since we are already about to reject the promise anyway\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tthis.emit('response', {\n\t\t\t\t\t\t\t\t\tstatusCode,\n\t\t\t\t\t\t\t\t\tbody\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthis.emit('error', error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet errorDescription = `HTTP error ${statusCode} from ${this.uri}`;\n\t\t\t\t\t\t\tif (body && body.error_description) {\n\t\t\t\t\t\t\t\terrorDescription += ' - ' + body.error_description;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject({ statusCode, errorDescription, body });\n\t\t\t\t\t\t\tthis.req = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.data = '';\n\t\t\t\tthis.buf = '';\n\n\t\t\t\tres.on('data', this.parse.bind(this));\n\t\t\t\tres.once('end', this.end.bind(this));\n\t\t\t\tresolve(this);\n\t\t\t});\n\t\t\treq.end();\n\t\t});\n\t}\n\n\tabort() {\n\t\tif (this.req) {\n\t\t\tthis.req.abort();\n\t\t\tthis.req = undefined;\n\t\t}\n\t\tthis.removeAllListeners();\n\t}\n\n\tend() {\n\t\tif (!this.req) {\n\t\t\t// request was ended intentionally by abort\n\t\t\t// do not auto reconnect.\n\t\t\treturn;\n\t\t}\n\n\t\tthis.req = undefined;\n\t\tsetTimeout(() => {\n\t\t\tthis.connect().catch(err => {\n\t\t\t\tthis.emit('error', err);\n\t\t\t\tthis.removeAllListeners();\n\t\t\t});\n\t\t}, this.reconnectInterval);\n\t}\n\n\tparse(chunk) {\n\t\tthis.buf += chunk;\n\t\tlet pos = 0;\n\t\tlet length = this.buf.length;\n\t\tlet discardTrailingNewline = false;\n\n\t\twhile (pos < length) {\n\t\t\tif (discardTrailingNewline) {\n\t\t\t\tif (this.buf[pos] === '\\n') {\n\t\t\t\t\t++pos;\n\t\t\t\t}\n\t\t\t\tdiscardTrailingNewline = false;\n\t\t\t}\n\n\t\t\tlet lineLength = -1;\n\t\t\tlet fieldLength = -1;\n\n\t\t\tfor (let i = pos; lineLength < 0 && i < length; ++i) {\n\t\t\t\tconst c = this.buf[i];\n\t\t\t\tif (c === ':') {\n\t\t\t\t\tif (fieldLength < 0) {\n\t\t\t\t\t\tfieldLength = i - pos;\n\t\t\t\t\t}\n\t\t\t\t} else if (c === '\\r') {\n\t\t\t\t\tdiscardTrailingNewline = true;\n\t\t\t\t\tlineLength = i - pos;\n\t\t\t\t} else if (c === '\\n') {\n\t\t\t\t\tlineLength = i - pos;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lineLength < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.parseEventStreamLine(pos, fieldLength, lineLength);\n\n\t\t\tpos += lineLength + 1;\n\t\t}\n\n\t\tif (pos === length) {\n\t\t\tthis.buf = '';\n\t\t} else if (pos > 0) {\n\t\t\tthis.buf = this.buf.slice(pos);\n\t\t}\n\t}\n\n\tparseEventStreamLine(pos, fieldLength, lineLength) {\n\t\tif (lineLength === 0) {\n\t\t\ttry {\n\t\t\t\tif (this.data.length > 0 && this.event) {\n\t\t\t\t\tconst event = JSON.parse(this.data);\n\t\t\t\t\tevent.name = this.eventName || '';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (['event', 'error', 'response'].indexOf(this.eventName) === -1) {\n\t\t\t\t\t\t\tthis.emit(this.eventName, event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.emit('event', event);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// do nothing if JSON.parse fails\n\t\t\t} finally {\n\t\t\t\tthis.data = '';\n\t\t\t\tthis.eventName = undefined;\n\t\t\t\tthis.event = false;\n\t\t\t}\n\t\t} else if (fieldLength > 0) {\n\t\t\tconst field = this.buf.slice(pos, pos + fieldLength);\n\t\t\tlet step = 0;\n\n\t\t\tif (this.buf[pos + fieldLength + 1] !== ' ') {\n\t\t\t\tstep = fieldLength + 1;\n\t\t\t} else {\n\t\t\t\tstep = fieldLength + 2;\n\t\t\t}\n\t\t\tpos += step;\n\t\t\tconst valueLength = lineLength - step;\n\t\t\tconst value = this.buf.slice(pos, pos + valueLength);\n\n\t\t\tif (field === 'data') {\n\t\t\t\tthis.data += value + '\\n';\n\t\t\t} else if (field === 'event') {\n\t\t\t\tthis.eventName = value;\n\t\t\t\tthis.event = true;\n\t\t\t} else if (field === 'id') {\n\t\t\t\tthis.lastEventId = value;\n\t\t\t} else if (field === 'retry') {\n\t\t\t\tconst retry = parseInt(value, 10);\n\t\t\t\tif (!Number.isNaN(retry)) {\n\t\t\t\t\tthis.reconnectInterval = retry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default EventStream;\n"]}